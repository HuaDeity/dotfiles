#!/usr/bin/env zsh

{{- if lookPath "gpg" }}
# The following lines are used by chezmoi for change detection
# fixGpgHome hash: {{ include "/usr/local/MacGPG2/libexec/fixGpgHome" | sha256sum }}
# shutdown-gpg-agent hash: {{ include "/usr/local/MacGPG2/libexec/shutdown-gpg-agent" | sha256sum }}
{{- end }}

set -euo pipefail     # or:  setopt err_exit nounset pipefail

# Map each target file to OLD_LINE::NEW_LINE
typeset -A TARGETS
TARGETS=(
  "/usr/local/MacGPG2/libexec/fixGpgHome" \
    'GNUPGHOME=${GNUPGHOME:-$HOME/.gnupg}::GNUPGHOME=${GNUPGHOME:-$HOME/.local/share/gnupg}'
  "/usr/local/MacGPG2/libexec/shutdown-gpg-agent" \
    'AGENT_SOCKET_DEFAULT="$HOME/.gnupg/S.gpg-agent"::AGENT_SOCKET_DEFAULT="$HOME/.local/share/gnupg/S.gpg-agent"'
)

patch_file() {
  local file="$1"
  # Make sure the key exists before using it
  if [[ -v "TARGETS[$file]" ]]; then
    local mapping=${TARGETS[$file]}
  else
    printf '\n==> %s\n    ERROR: key not found in TARGETS – internal typo?\n' "$file"
    return 1
  fi
  local old_line="${mapping%%::*}"
  local new_line="${mapping##*::}"

  printf '\n==> %s\n' "$file"

  # Check 1: Target exists
  if [[ ! -f "$file" ]]; then
    echo "    ERROR: target not found"
    return 0
  fi

  # Check 2: already patched?
  if grep -qF -- "$new_line" "$file"; then
    echo "    Already patched – skipping"
    return 0
  fi

  # Check 3: contains line to patch?
  if ! grep -qF -- "$old_line" "$file"; then
    echo "    ERROR: original line not found – aborting"
    return 0
  fi

  # Escape special chars for sed
  local sed_old=$(printf '%s\n' "$old_line" | sed -e 's/[\/&$.*^]/\\&/g')
  local sed_new=$(printf '%s\n' "$new_line" | sed -e 's/[\/&$.*^]/\\&/g')

  # Patch in‑place with backup, using sudo because files live under /usr/local
  if sudo sed -i.bak "s/$sed_old/$sed_new/" "$file"; then
    echo "    Patched (backup: $file.bak)"
    # Execute fixGpgHome after patching so $GNUPGHOME is migrated immediately
    if [[ "$file" == */fixGpgHome ]]; then
      echo "    Running $file …"
      if "$file"; then
        echo "    Execution successful"
      else
        echo "    WARNING: $file exited with $?. Check its logs."
      fi
    fi
  else
    echo "    ERROR: sed failed – check permissions"
    return 1
  fi
}

for tgt in ${(k)TARGETS}; do
  patch_file "$tgt"
done

OLD_GNUPGHOME="$HOME/.gnupg"
NEW_GNUPGHOME="$HOME/.local/share/gnupg"

if [[ -d "$NEW_GNUPGHOME" ]]; then
  if [[ -d "$OLD_GNUPGHOME" && ! -L "$OLD_GNUPGHOME" ]]; then
    echo -e "\n==> Migrating legacy GnuPG data to $NEW_GNUPGHOME"

    # Copy everything except transient sockets / lock files
    # Use --ignore-existing to avoid overwriting files that already exist in the destination
    rsync -av --ignore-existing --exclude 'S.gpg-agent*' --exclude '*.lock' \
          "$OLD_GNUPGHOME/" "$NEW_GNUPGHOME/"

    rm -rf "$OLD_GNUPGHOME"
  else
    echo "==> No legacy ~/.gnupg directory found – nothing to migrate."
  fi
else
  echo "WARNING: $NEW_GNUPGHOME does not exist; fixGpgHome may have failed."
fi

echo -e "\nAll done. You may need to restart any long‑running apps using GnuPG."
